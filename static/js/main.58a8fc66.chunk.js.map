{"version":3,"sources":["Components/Selector.tsx","Components/Results.tsx","Components/StockPicker.tsx","App.tsx","utilities/scrape.ts","reportWebVitals.ts","index.tsx"],"names":["Selector","showModal","generateResults","showResult","result","setUrl","url","saveStock","type","symbol","Col","Button","className","onClick","Results","vals","tick","actualURL","useState","subtitle","setSubTitle","setLength","today","setToday","usedVals","setUsedVals","updatePage","days","show","numDays","slice","length","Card","Body","Title","Text","href","Navbar","bg","variant","Container","Nav","Math","floor","Subtitle","toFixed","height","scaleX","paddingEnd","paddingStart","scaleY","paddingTop","series","data","width","seriesIndex","axis","labelAttributes","fontFamily","x","labelStyle","dominantBaseline","textAnchor","lineLength","lineStyle","stroke","mean","variance","StockPicker","visible","setVisible","type1","setType1","tick1","setTick1","hide","Modal","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","onChange","ev","target","Footer","App","setResult","setTick","setVals","setActualURL","showResults","typ","symb","url1","toLocaleLowerCase","concat","Date","dd","String","getDate","padStart","getMonth","getFullYear","console","log","getStockURL","toUpperCase","file","DJIA","SPX","COMP","RUT","XAU","BX","returnVals","Array","i","reverse","getStock","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58a8fc66.chunk.js","sourcesContent":["import {Button, Col} from 'react-bootstrap';\r\n\r\ninterface selection{\r\n    showModal: (b:boolean)=>void,\r\n    generateResults: (s1:string, s2:string)=>void,\r\n    result: boolean,\r\n    showResult: (b:boolean) =>void,\r\n    url: boolean,\r\n    setUrl: (b:boolean) =>void\r\n}\r\n\r\nexport function Selector({showModal, generateResults, result, showResult, url, setUrl}:selection): JSX.Element{\r\n    function saveStock(type:string, symbol:string):void{\r\n        setUrl(false);\r\n        showResult(true);\r\n        generateResults(type, symbol);\r\n    }\r\n    function addStock(){\r\n        showModal(true);\r\n    }\r\n    return(\r\n        <Col>\r\n            <h2>Index Options</h2>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"DJIA\")}}>DJIA</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"SPX\")}}>S&P 500</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"COMP\")}}>NASDAQ</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"RUT\")}}>Russell 2000</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"XAU\")}}>Gold and Silver</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"bond\", \"BX/TMUBMUSD10Y\")}}>10 Year Treasury Yield</Button>\r\n            <Button className = 'm-4' onClick={addStock}>Other</Button>\r\n        </Col>\r\n    )\r\n}","import { mean, variance } from 'mathjs';\r\nimport { useState } from 'react';\r\nimport {Button, Card, Col, Container, Nav, Navbar} from 'react-bootstrap';\r\nimport {\r\n    Chart,\r\n    Bars, Cloud, Dots, Labels, Lines, Pies, RadialLines, Ticks, Title,\r\n    Layer, Animate, Transform, Handlers, DropShadow, Gradient\r\n  } from 'rumble-charts';\r\n\r\n//Navbar came from https://react-bootstrap.github.io/components/navbar/\r\n//Bootstrap card came from https://react-bootstrap.github.io/components/cards/\r\n// Chart info came from https://rumble-charts.github.io/?path=/docs/components-graphics-lines--story-1\r\ninterface stockResult{\r\n    result: boolean;\r\n    vals: Array<number>;\r\n    tick:string;\r\n    url:boolean;\r\n    actualURL: string;\r\n}\r\nexport function Results({result, vals, tick, url, actualURL}: stockResult): JSX.Element{\r\n    const [subtitle, setSubTitle] = useState<string>(\"Today\");\r\n    const [length, setLength] = useState<number>(10);\r\n    const [today, setToday] = useState<boolean>(true);\r\n    const [usedVals, setUsedVals] = useState<Array<number>>(vals);\r\n    function updatePage(days:string, show:boolean, numDays:number){\r\n        if(days === \"Today\"){\r\n            setToday(true);\r\n        }\r\n        else if(days === \"1 Year\"){\r\n            setToday(false);\r\n            setLength(numDays);\r\n            setUsedVals(vals);\r\n        }\r\n        else{\r\n            setToday(false);\r\n            setLength(numDays);\r\n            setUsedVals(vals.slice((vals.length - numDays - 1), (vals.length - 1)));\r\n        }\r\n        setSubTitle(days);\r\n    }\r\n    return(\r\n        <Col>\r\n            <h2>Stock Results</h2>\r\n            {url && <Card >\r\n                <Card.Body>\r\n                    <Card.Title>Ticker Symbol: {tick}</Card.Title>\r\n                    <Card.Text>\r\n                    To access data on your selected stock from the last year, click <a href={actualURL}>here.</a>  The data will be downloaded to your computer.  If the CSV file that is downloaded is empty, you did not enter either the correct type, ticker symbol, or that stock is not supported.\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>}\r\n            {result && <Navbar bg=\"primary\" variant=\"dark\">\r\n                <Container>\r\n                <Nav className=\"me-auto\">\r\n                    <Button onClick={()=> updatePage(\"Today\", false, 0)}>Today</Button>\r\n                    <Button onClick={()=> updatePage(\"10 Days\", true, 10)}>10 Days</Button>\r\n                    <Button onClick={()=> updatePage(\"30 Days\", true, 30)}>30 Days</Button>\r\n                    <Button onClick={()=> updatePage(\"6 Months\", true, Math.floor(vals.length/2))}>6 Months</Button>\r\n                    <Button onClick={()=> updatePage(\"1 Year\", true, vals.length + 1)}>1 Year</Button>\r\n                </Nav>\r\n                </Container>\r\n            </Navbar>}\r\n            {result && <Card>\r\n                <Card.Body>\r\n                    <Card.Title>Ticker Symbol: {tick}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{subtitle}</Card.Subtitle>\r\n                    {today && <Card.Body>\r\n                        <Card.Text>\r\n                        Value: {vals[vals.length - 1]}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                        Change: {(vals[vals.length - 2] - vals[vals.length - 1]).toFixed(2)}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                        Percent Change: {(100 * (vals[vals.length - 2] - vals[vals.length - 1]) / vals[vals.length - 2]).toFixed(2) + '%'}\r\n                        </Card.Text>\r\n                        </Card.Body>}\r\n                    {!today && <Card.Body>\r\n                        <Chart\r\n                    height={300}\r\n                    scaleX={{\r\n                        paddingEnd: 0,\r\n                        paddingStart: 0\r\n                    }}\r\n                    scaleY={{\r\n                        paddingTop: 10\r\n                    }}\r\n                    series={[\r\n                        {\r\n                        data: usedVals\r\n                        },\r\n                    ]}\r\n                    width={600}\r\n                    >\r\n                        <Layer\r\n                        height=\"80%\"\r\n                        seriesIndex={[\r\n                        0\r\n                        ]}\r\n                        width=\"70%\"\r\n                    >\r\n                        <Lines/>\r\n                        <Ticks\r\n                        axis=\"y\"\r\n                        labelAttributes={{\r\n                            fontFamily: 'sans-serif',\r\n                            x: -5\r\n                        }}\r\n                        labelStyle={{\r\n                            dominantBaseline: 'middle',\r\n                            textAnchor: 'end'\r\n                        }}\r\n                        lineLength=\"100%\"\r\n                        lineStyle={{\r\n                            stroke: 'rgba(255,255,255,0.3)'\r\n                        }}\r\n                        />\r\n                    </Layer>\r\n                    </Chart>\r\n                    <Card.Text>\r\n                        Mean Value: {mean(usedVals).toFixed(2)}\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                        Value's Variance: {variance(usedVals).toFixed(2)}\r\n                        </Card.Text>\r\n                    </Card.Body>}\r\n                </Card.Body>\r\n            </Card>}\r\n        </Col>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\n\r\ninterface addStock{\r\n    visible:boolean,\r\n    setVisible: (b:boolean) =>void,\r\n    generateResults: (s1:string, s2:string)=>void,\r\n    result: boolean,\r\n    showResult: (b:boolean) =>void\r\n    url: boolean;\r\n    setUrl: (b:boolean) =>void\r\n}\r\n\r\nexport function StockPicker({visible, setVisible, generateResults, result, showResult, url, setUrl}: addStock): JSX.Element{\r\n    const [type1, setType1] = useState<string>(\"Type\");\r\n    const [tick1, setTick1] = useState<string>(\"Ticker Symbol\");\r\n    function saveStock(){\r\n        setUrl(true);\r\n        showResult(false);\r\n        generateResults(type1, tick1);\r\n        setVisible(false);\r\n    }\r\n    const hide = ()=> setVisible(false);\r\n    return(<Modal show={visible} onHide={hide}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Enter New Stock Ticker</Modal.Title>\r\n        </Modal.Header>\r\n      \r\n        <Modal.Body>\r\n            Example-  Type: etf, Ticker Symbol: SPY\r\n        <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"addCardForm.promptTextArea\">\r\n                <Form.Label>Type: index/etf/bond/company</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3} value={type1} onChange={(ev: React.ChangeEvent<HTMLInputElement>)=>setType1(ev.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextarea\">\r\n                <Form.Label>Ticker Symbol</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3} value={tick1} onChange={(ev: React.ChangeEvent<HTMLInputElement>)=>setTick1(ev.target.value)}/>\r\n            </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n      \r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={hide}>Close</Button>\r\n          <Button variant=\"primary\" onClick={saveStock}>Get Data</Button>\r\n        </Modal.Footer>\r\n      </Modal>)\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Container, Row} from 'react-bootstrap';\r\nimport {Selector} from './Components/Selector'\r\nimport { Results } from './Components/Results';\r\nimport { StockPicker } from './Components/StockPicker';\r\nimport { getStock, getStockURL } from './utilities/scrape';\r\n\r\nfunction App() {\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n  const [result, setResult] = useState<boolean>(false);\r\n  const [url, setUrl] = useState<boolean>(false);\r\n  const [type, setType] = useState<string>(\"Type\");\r\n  const [tick, setTick] = useState<string>(\"Ticker Symbol\");\r\n  const [vals, setVals] = useState<Array<number>>([]);\r\n  const [actualURL, setActualURL] = useState<string>(\"\");\r\n  function showResults(typ:string, symb:string):void{\r\n    setActualURL(getStockURL(typ, symb));\r\n    setTick(symb.toUpperCase());\r\n    setVals(getStock(typ, symb));\r\n    //have the results object appear\r\n    //pass info to results\r\n  }\r\n  return (\r\n    <Container className = \"App\">\r\n      <h1>Stock Data</h1>\r\n      <Row>\r\n        <Selector showModal ={setVisible} generateResults = {showResults} result = {result} showResult = {setResult} url ={url} setUrl ={setUrl}></Selector>\r\n        <Results result = {result} vals = {vals} tick = {tick} url={url} actualURL ={actualURL}></Results>\r\n        <StockPicker visible = {visible} setVisible ={setVisible} generateResults = {showResults} result = {result} showResult = {setResult} url ={url} setUrl ={setUrl}></StockPicker>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","import DJIA from '../asset/djia.json';\r\nimport SPX from '../asset/spx.json';\r\nimport COMP from '../asset/comp.json';\r\nimport RUT from '../asset/rut.json';\r\nimport XAU from '../asset/xau.json';\r\nimport BX from '../asset/bx.json';\r\n\r\nexport function getStockURL(type:string, symbol:string):string{\r\n    let url1;\r\n    if(type === \"company\"){\r\n        url1 = \"\";\r\n    }\r\n    else{\r\n        url1 = type.toLocaleLowerCase().concat(\"/\");\r\n    }\r\n    //get date format, from https://www.codegrepper.com/code-examples/javascript/get+current+date+in+typescript+in+mm%2Fdd%2Fyyyy+format\r\n    const today = new Date();\r\n    const dd = String(today.getDate()).padStart(2, '0');\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0');\r\n    const yyyy = today.getFullYear();\r\n    const day2 = mm + '/' + dd + '/' + yyyy;\r\n    let url = \"https://www.wsj.com/market-data/quotes/\" + url1 + symbol + \"/historical-prices/download?num_rows=365&range_days=365&endDate=\" +day2;\r\n    console.log(url);\r\n    //run get request\r\n    return url\r\n}\r\n\r\nexport function getStock(type:string, symbol:string):Array<number>{\r\n    let file;\r\n    if(symbol === \"DJIA\"){\r\n        file = DJIA;\r\n    }\r\n    else if(symbol === \"SPX\"){\r\n        file = SPX;\r\n    }\r\n    else if(symbol === \"COMP\"){\r\n        file = COMP;\r\n    }\r\n    else if(symbol === \"RUT\"){\r\n        file = RUT;\r\n    }\r\n    else if(symbol === \"XAU\"){\r\n        file = XAU;\r\n    }\r\n    else if(symbol === \"BX/TMUBMUSD10Y\"){\r\n        file = BX;\r\n    }\r\n    else{\r\n        file = DJIA\r\n    }\r\n    let numDays = file.length;\r\n    let returnVals =  new Array<number>();\r\n    for(let i:number = 0; i < numDays; i++){\r\n        returnVals = returnVals.concat(file[i][\"Close\"]);\r\n    }\r\n    return returnVals.reverse();\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}