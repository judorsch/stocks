{"version":3,"sources":["Components/Selector.tsx","Components/Results.tsx","Components/StockPicker.tsx","App.tsx","utilities/scrape.ts","reportWebVitals.ts","index.tsx"],"names":["Selector","showModal","generateResults","showResult","result","saveStock","type","symbol","Col","Button","className","onClick","Results","test","console","log","series","data","vals","Navbar","bg","variant","Container","Nav","Card","Body","Title","Subtitle","Text","width","height","minY","maxY","StockPicker","visible","setVisible","useState","type1","setType1","tick1","setTick1","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","onChange","ev","target","Footer","App","setResult","setVals","showResults","typ","symb","url1","toLocaleLowerCase","concat","today","Date","dd","String","getDate","padStart","url","getMonth","getFullYear","getStock","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f3c5730.chunk.js","sourcesContent":["import {Button, Col} from 'react-bootstrap';\r\n\r\ninterface selection{\r\n    showModal: (b:boolean)=>void,\r\n    generateResults: (s1:string, s2:string)=>void,\r\n    result: boolean,\r\n    showResult: (b:boolean) =>void\r\n}\r\n\r\nexport function Selector({showModal, generateResults, result, showResult}:selection): JSX.Element{\r\n    function saveStock(type:string, symbol:string):void{\r\n        showResult(true);\r\n        generateResults(type, symbol);\r\n    }\r\n    function addStock(){\r\n        showModal(true);\r\n    }\r\n    return(\r\n        <Col>\r\n            <h2>Index Options</h2>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"DJIA\")}}>DJIA</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"SPX\")}}>S&P 500</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"COMP\")}}>NASDAQ</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"RUT\")}}>Russell 2000</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"index\", \"XAU\")}}>Gold and Silver</Button>\r\n            <Button className = 'm-4' onClick={() => {saveStock(\"bond\", \"BX/TMUBMUSD10Y\")}}>10 Year Treasury Yield</Button>\r\n            <Button className = 'm-4' onClick={addStock}>Other</Button>\r\n        </Col>\r\n    )\r\n}","import {Button, Card, Col, Container, Nav, Navbar} from 'react-bootstrap';\r\nimport {\r\n    Chart,\r\n    Bars, Cloud, Dots, Labels, Lines, Pies, RadialLines, Ticks, Title,\r\n    Layer, Animate, Transform, Handlers, DropShadow, Gradient\r\n  } from 'rumble-charts';\r\n\r\n//Navbar came from https://react-bootstrap.github.io/components/navbar/\r\n//Bootstrap card came from https://react-bootstrap.github.io/components/cards/\r\n// Chart info came from https://www.npmjs.com/package/rumble-charts\r\ninterface stockResult{\r\n    result: boolean;\r\n    vals: Array<number>;\r\n}\r\nexport function Results({result, vals}: stockResult): JSX.Element{\r\n\r\n    function test(){\r\n        console.log(\"hi\");\r\n    }\r\n    const series = [{\r\n        data: vals\r\n      }];\r\n    return(\r\n        <Col>\r\n            <h2>Stock Results</h2>\r\n            <Navbar bg=\"primary\" variant=\"dark\">\r\n                <Container>\r\n                <Nav className=\"me-auto\">\r\n                    <Button onClick={test}>Today</Button>\r\n                    <Button onClick={test}>10 Days</Button>\r\n                    <Button onClick={test}>30 Days</Button>\r\n                    <Button onClick={test}>6 Months</Button>\r\n                    <Button onClick={test}>1 Year</Button>\r\n                </Nav>\r\n                </Container>\r\n            </Navbar>\r\n            {result && <Card>\r\n                <Card.Body>\r\n                    <Card.Title>Stock Name</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">Today</Card.Subtitle>\r\n                    <Card.Text>\r\n                    Some quick example text to build on the card title and make up the bulk of\r\n                    the card's content.\r\n                    </Card.Text>\r\n                    <Chart width={600} height={250} series={series} minY={0} maxY={20}>\r\n                        <Lines />\r\n                        <Dots />\r\n                    </Chart>;\r\n                </Card.Body>\r\n                </Card>}\r\n        </Col>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\n\r\ninterface addStock{\r\n    visible:boolean,\r\n    setVisible: (b:boolean) =>void,\r\n    generateResults: (s1:string, s2:string)=>void,\r\n    result: boolean,\r\n    showResult: (b:boolean) =>void\r\n}\r\n\r\nexport function StockPicker({visible, setVisible, generateResults, result, showResult}: addStock): JSX.Element{\r\n    const [type1, setType1] = useState<string>(\"Type\");\r\n    const [tick1, setTick1] = useState<string>(\"Ticker Symbol\");\r\n    function saveStock(){\r\n        showResult(true);\r\n        generateResults(type1, tick1);\r\n        setVisible(false);\r\n    }\r\n    const hide = ()=> setVisible(false);\r\n    return(<Modal show={visible} onHide={hide}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Enter New Stock Ticker</Modal.Title>\r\n        </Modal.Header>\r\n      \r\n        <Modal.Body>\r\n        <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"addCardForm.promptTextArea\">\r\n                <Form.Label>Type: index/etf/bond/company</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3} value={type1} onChange={(ev: React.ChangeEvent<HTMLInputElement>)=>setType1(ev.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextarea\">\r\n                <Form.Label>Ticker Symbol</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3} value={tick1} onChange={(ev: React.ChangeEvent<HTMLInputElement>)=>setTick1(ev.target.value)}/>\r\n            </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n      \r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={hide}>Close</Button>\r\n          <Button variant=\"primary\" onClick={saveStock}>Save changes</Button>\r\n        </Modal.Footer>\r\n      </Modal>)\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Container, Row} from 'react-bootstrap';\r\nimport {Selector} from './Components/Selector'\r\nimport { Results } from './Components/Results';\r\nimport { StockPicker } from './Components/StockPicker';\r\nimport { getStock } from './utilities/scrape';\r\n\r\nfunction App() {\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n  const [result, setResult] = useState<boolean>(false);\r\n  const [type, setType] = useState<string>(\"Type\");\r\n  const [tick, setTick] = useState<string>(\"Ticker Symbol\");\r\n  const [vals, setVals] = useState<Array<number>>([]);\r\n  function showResults(typ:string, symb:string):void{\r\n    setVals(getStock(typ, symb));\r\n    //have the results object appear\r\n    //pass info to results\r\n  }\r\n  return (\r\n    <Container className = \"App\">\r\n      <h1>Stock Data</h1>\r\n      <Row>\r\n        <Selector showModal ={setVisible} generateResults = {showResults} result = {result} showResult = {setResult}></Selector>\r\n        <Results result = {result} vals = {vals}></Results>\r\n        <StockPicker visible = {visible} setVisible ={setVisible} generateResults = {showResults} result = {result} showResult = {setResult}></StockPicker>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","\r\n\r\nexport function getStock(type:string, symbol:string):Array<number>{\r\n    let url1;\r\n    if(type === \"company\"){\r\n        url1 = \"\";\r\n    }\r\n    else{\r\n        url1 = type.toLocaleLowerCase().concat(\"/\");\r\n    }\r\n    //get date format, from https://www.codegrepper.com/code-examples/javascript/get+current+date+in+typescript+in+mm%2Fdd%2Fyyyy+format\r\n    const today = new Date();\r\n    const dd = String(today.getDate()).padStart(2, '0');\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0');\r\n    const yyyy = today.getFullYear();\r\n    const day2 = mm + '/' + dd + '/' + yyyy;\r\n    let url = \"https://www.wsj.com/market-data/quotes/\" + url1 + symbol + \"/historical-prices/download?num_rows=365&range_days=365&endDate=\" +day2;\r\n    console.log(url);\r\n    //run get request\r\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}